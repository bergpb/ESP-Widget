import machinefrom machine import I2C, Pinimport ssd1306import neopixelimport timeclass Hardware:    def __init__(self):        self.i2c = I2C(sda=Pin(0), scl=Pin(2))        self.display = ssd1306.SSD1306_I2C(128, 64, self.i2c, 0x3c, False)        self.np = neopixel.NeoPixel(machine.Pin(4), 1)        self.button1 = machine.Pin(14, machine.Pin.IN, machine.Pin.PULL_UP)        self.button2 = machine.Pin(12, machine.Pin.IN, machine.Pin.PULL_UP)        self.button3 = machine.Pin(13, machine.Pin.IN, machine.Pin.PULL_UP)        self.buzzer = machine.PWM(machine.Pin(5))    def oled_clear(self):        self.display.fill(0)    def oled_pixel(self, x, y, col):        self.display.pixel(x, y, col)    def oled_show(self):        self.display.show()    def oled_text(self, text, x = 0, y = 0):        for xx in range(x, x + (len(text) * 8)):            for yy in range(y, y + 8):                self.display.pixel(xx, yy, 0)        self.display.text(text, x, y)    def hex2bits(self, hexstr):        bitstr = ""        for pos in range(0, len(hexstr) - 1, 2):            newhex = hexstr[pos:pos + 2]            newint = int(newhex, 16)            newbin = bin(newint)[2:]            newbits = '0' * (8 - len(newbin)) + newbin            bitstr += newbits        return bitstr    def oled_graphic(self, file, origin_x = 0, origin_y = 0):        pic = [line.rstrip('\r\n') for line in open(file)]        for y, row in enumerate(pic):            line = self.hex2bits(row)            for x, col in enumerate(line):                            if col == "1":                    self.display.pixel(origin_x + x, origin_y + y, 1)                else:                    self.display.pixel(origin_x + x, origin_y + y, 0)    def pixel_color(self, red, green, blue):        self.np[0] = (red, green, blue)        self.np.write()    def button_pressed(self, pin):        if pin.value() == 0:            active = 0            while pin.value() == 0 and active < 75:                active += 1                time.sleep_ms(1)            if pin.value() == 0 and active >= 75:                self.buzzer_play(1000, 128, 50)                return True            else:                return False        else:            return False            def button1_pressed(self):        return self.button_pressed(self.button1)    def button2_pressed(self):        return self.button_pressed(self.button2)    def button3_pressed(self):        return self.button_pressed(self.button3)    def buzzer_play(self, freq, duty, duration):        self.buzzer.freq(freq)        self.buzzer.duty(duty)        time.sleep_ms(duration)        self.buzzer.deinit()