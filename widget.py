import networkimport socketimport timeimport gcsta = network.WLAN(network.STA_IF)ap = network.WLAN(network.AP_IF)machine_id = ""data_host = ""data_path = ""data_addr = ""last_message = ""message_ack = Falseerror_count = 0request_count = 0# ------------------------------------------------------# helper routines for doWidgetWork()# ------------------------------------------------------def setupStatus(hw):    hw.oled_clear()    hw.oled_text("STATUS", 40, 0)    hw.oled_text("UpTime :", 0, 8)    hw.oled_text("FreeMem:", 0, 16)    from ubinascii import hexlify    hw.oled_text("MAC:", 0, 24)    hw.oled_text(hexlify(sta.config('mac')), 32, 24)    hw.oled_text("ID:", 0, 32)    import machine    hw.oled_text(hexlify(machine.unique_id()), 24, 32)    hw.oled_text("IP:", 0, 40)    hw.oled_text("GW:", 0, 48)    (address, mask, gateway, dns) = sta.ifconfig()    hw.oled_text(address, 24, 40)    hw.oled_text(gateway, 24, 48)    hw.oled_show()    address = None    mask = None    gateway = None    dns = None    gc.collect()def updateStatus(hw):    hw.oled_text(str(time.time()), 64, 8)    hw.oled_text(str(gc.mem_free()), 64, 16)    hw.oled_show()def setupWidget(hw):    global data_host    global data_addr    global machine_id    global data_path    data_host = "wezensky.no-ip.org"    try:        data_addr = socket.getaddrinfo(data_host, 80)[0][-1]    except:        hw.oled_clear()        hw.oled_text("Host Not Found", 8, 24)        hw.oled_show()    import machine    from ubinascii import hexlify    machine_id = hexlify(machine.unique_id()).decode("utf-8")    data_path = machine_id + "/data.txt"# --------------------------------------------------------def updateWidget(hw):        global data_addr    global data_host    global data_path    global message_ack    global error_count    global last_message    global request_count    request_count += 1    hw.pixel_color(0, 32, 0)    resp = ""    try:        s = socket.socket()        s.connect(data_addr)        s.send(bytes('GET /%s HTTP/1.0\r\nHost: %s\r\n\r\n' % (data_path, data_host), 'utf8'))        while True:            data = s.recv(100)            if data:                resp += str(data, 'utf8')            else:                break        s.close()    except:        print("HTTP Get failed.")    if message_ack:        hw.pixel_color(0, 0, 0)    else:        hw.pixel_color(0, 0, 64)    if resp == "":        print("No content retrieved")                error_count += 1        if (error_count > 5):            print("Sleeping...")            time.sleep(120)            error_count = 0    else:        print(resp)        error_count = 0        lines = resp.split("\r\n")        linecount = len(lines)        content = ""        if linecount > 0:            found = False            for line in range(linecount):                if lines[line] == "":                    found = True                else:                    if found:                        content += lines[line]        if content != "":            if last_message == "":                last_message = content                new_content = True            else:                if content == last_message:                                new_content = False                else:                    last_message = content                    new_content = True            if new_content:                message_ack = False                lines = content.split("/")                if len(lines) > 0:                    if lines[0] == "t":                        hw.oled_clear()                        for line in range(1, len(lines)):                            hw.oled_text(lines[line], 0, 8 * (line - 1))                        hw.oled_show()                    elif lines[0] == "i":                        hw.oled_clear()                        hw.oled_graphic('/graphics/' + lines[1] + '.txt', int(lines[2]), int(lines[3]))                        hw.oled_show()                hw.pixel_color(0, 0, 64)    resp = None    s = None    data = None    lines = None    linecount = None    content = None    found = None    new_content = None    line = None    gc.collect()    print(gc.mem_free())    print(request_count)# --------------------------------------------------------# will handle the display and the UI for the main function#---------------------------------------------------------def Work(hw):    global last_message    global message_ack        setupWidget(hw)    current_screen = 0    refresh_deadline = 0    while True:        if current_screen == 0:            if time.time() > refresh_deadline:                updateWidget(hw)                refresh_deadline = time.time() + 30        elif current_screen == 1:            updateStatus(hw)        if hw.button1_pressed():            if current_screen == 0:                current_screen = 1                setupStatus(hw)            elif current_screen == 1:                current_screen = 0                last_message = ""                updateWidget(hw)        if hw.button2_pressed():            if current_screen == 1:                hw.pixel_color(64, 0, 0)                sta.disconnect()                sta.connect("dummy", "")                sta.active(False)                break                    if hw.button3_pressed():            hw.pixel_color(0, 0, 0)            message_ack = True            #if current_screen == 1:                #hw.oled_clear()                #hw.oled_graphic('/graphics/yingyang.txt', 48, 16)                #hw.oled_show()        gc.collect()    current_screen = None    refresh_deadline = None    gc.collect()